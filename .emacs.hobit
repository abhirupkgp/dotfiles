(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("e9776d12e4ccb722a2a732c6e80423331bcb93f02e089ba2a4b02e85de1cf00e" default)))
 '(ido-enable-flex-matching t)
 '(inhibit-startup-screen t))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;;Visual configs
(tool-bar-mode -1)
(scroll-bar-mode -1)
;;(blink-cursor-mode -1)
(menu-bar-mode -1)

;; fill column 80 character rule
;; (setq-default fill-column 80)

;;Autofill mode
(global-set-key (kbd "C-c q") 'auto-fill-mode)
;;80 character rule
(setq-default fill-column 80)

(show-paren-mode 1)
(setq show-paren-delay 0)
(setq frame-title-format "emacs")
(setq scroll-step 1) ;; keyboard scroll one line at a time
;; scroll one line at a time (less "jumpy" than defaults)

(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time

(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling

(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

;;theme
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(load-theme 'hickey t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'package)
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
(package-initialize)

;;Bootstrap for use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
(require 'use-package))

(require 'diminish)
(require 'bind-key)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;Package Installations

(use-package auto-complete
  :ensure t
  :init
  (ac-config-default)
  :config
  (setq ac-delay 0.02))


(use-package autopair
  :ensure t
  :config
  (autopair-global-mode t))

(use-package smex
  :ensure t
  :bind (("M-x" . smex)
	 ("C-c C-c M-x" . execute-extended-command)))

(use-package windmove
  :ensure t
  :init
  (windmove-default-keybindings 'meta))

(winner-mode t)

(use-package ess
  :ensure t
  :init
  (require 'ess-site))

(setq ess-indent-with-fancy-comments nil) ;; got bored with fancyness

(use-package magit
  :ensure t)
(use-package beacon
  :ensure t
  :init
(beacon-mode 1))

(use-package multiple-cursors
  :ensure t
  :init
  (require 'multiple-cursors))

(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

;;expand-region
(use-package expand-region
  :ensure t
  :init
  (global-set-key (kbd "C-=") 'er/expand-region))

;;ace-jump-mode
(use-package ace-jump-mode
  :ensure t)
(autoload
  'ace-jump-mode
  "ace-jump-mode"
  "Emacs quick move minor mode"
t)

;;C-c SPC is ace jump character mode
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)

;;ido mode
(require 'ido)
(ido-mode t)

;;flex ido
(use-package flx-ido
  :ensure t)
(require 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)


;; disable ido faces to see flx highlights.
(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)
(setq flx-ido-threshold 1000)

;;ag.el
(use-package ag
  :ensure t)

(setq ag-highlight-search t)
(global-set-key (kbd "C-c f") 'ag-project)
(global-set-key (kbd "C-c a") 'ag)
(setq ag-reuse-buffers t)
(add-hook 'ag-mode-hook
          (lambda ()
(copy-face 'lazy-highlight 'ag-match-face)))

;;projectile
(use-package projectile
  :ensure t
  :config
(projectile-mode))

;; yasnippets

(use-package yasnippet
  :ensure t)
(require 'yasnippet)
(yas-global-mode 1)
(add-to-list 'yas-snippet-dirs "~/.emacs.d/yasnippet-snippets")
(setq yas-snippet-dirs
      '("~/.emacs.d/snippets"                 ;; personal snippets
	"~/.emacs.d/yasnippet-snippets"       ;; default snippets
	))

;;ensime

(use-package ensime
  :ensure t
  :pin melpa-stable)

;;auctex

(require 'tex)
(use-package auto-complete-auctex
  :ensure t)
(require 'auto-complete-auctex)
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq TeX-save-query nil)
(setq-default TeX-master nil)
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
(setq TeX-PDF-mode t)

;; markdown-mode
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
